
#include "m16def.inc"

.DSEG
_tmp_:.byte 2
.CSEG

.org 0x0
rjmp reset

reset:
PCIE0
ser r24
out DDRD, r24 
clr r24
out DDRB, r24
ldi	r16,LOW(RAMEND)		; load low byte of RAMEND into r16
	out	SPL,r16			; store r16 in stack pointer low
	ldi	r16,HIGH(RAMEND)	; load high byte of RAMEND into r16
	out	SPH,r16		
;-------------------------------------------------------------------------
;----Main Program---------------------------------------------------------
;-------------------------------------------------------------------------
main:
	ldi r18, '0'		;r18-r21 have the digitis of our clock
	ldi r19, '0'		;In the following format
	ldi r20, '0'		;r18 r19 MIN : r20 r21 SEC
	ldi r21, '0'
	rcall lcd_init
	mov  r24,r18
	rcall lcd_data 
	mov r24,r19
	rcall lcd_data 
	ldi r24,' '
	rcall lcd_data 
	ldi r24,'M'
	rcall lcd_data 
	ldi r24,'I'
	rcall lcd_data 
	ldi r24,'N'
	rcall lcd_data 
	ldi r24,':'
	rcall lcd_data 
	mov r24,r20
	rcall lcd_data 
	mov r24,r21
	rcall lcd_data 
	ldi r24,' '
	rcall lcd_data 
	ldi r24,'S'
	rcall lcd_data 
	ldi r24,'E'
	rcall lcd_data 
	ldi r24,'C'
	rcall lcd_data 
	

loopp:
	in r17,PINB			;check if PB7 is pressed
	sbrc r17,7			;if yes start over
	rjmp main
	in r17,PINB			
	sbrs r17,0			;check if PB0 is pressed
	rjmp loopp			;if not wait until it is pressed
	
	inc r21				;increase the r21 and make all the necessary changes
	cpi r21, 0x3A		;to all the register r18-r21
	brne display
	ldi r21, '0'

	inc r20
	cpi r20,0x36
	brne display
	ldi r20, '0'

	inc r19
	cpi r19,0x3A
	brne display
	ldi r19, '0'

	inc r18
	cpi r18,0x36
	brne display
	rjmp main

	in r17,PINB
	sbrc r17,7
	rjmp main

display:				;display registers r18:r21 in the following format
	rcall lcd_init		;r18 r19 MIN : r20 r21 SEC
	mov r24,r18
	rcall lcd_data 
	mov r24,r19
	rcall lcd_data 
	ldi r24,' '
	rcall lcd_data 
	ldi r24,'M'
	rcall lcd_data 
	ldi r24,'I'
	rcall lcd_data 
	ldi r24,'N'
	rcall lcd_data 
	ldi r24,':'
	rcall lcd_data 
	mov r24,r20
	rcall lcd_data 
	mov r24,r21
	rcall lcd_data 
	ldi r24,' '
	rcall lcd_data 
	ldi r24,'S'
	rcall lcd_data 
	ldi r24,'E'
	rcall lcd_data 
	ldi r24,'C'
	rcall lcd_data 
	ldi r24,low(1000)		;wait 1sec
	ldi r25,high(1000)
	 
	rcall wait_msec
	rjmp loopp









	
;-------------------------------------------------------------------------
;----Library Functions----------------------------------------------------
;-------------------------------------------------------------------------






wait_msec:
push r24 ; 
push r25 ; 
ldi r24 , low(998) 
ldi r25 , high(998) ; 1 ?????? (0.125 µsec)
rcall wait_usec ; 3 ?????? (0.375 µsec), p???a?e? s??????? ?a??st???s? 998.375 µsec
pop r25 ; 2 ?????? (0.250 µsec)
pop r24 ; 2 ??????
sbiw r24 , 1 ; 2 ??????
brne wait_msec ; 1 ? 2 ?????? (0.125 ? 0.250 µsec)
ret ; 4 ?????? (0.500 µsec)


wait_usec:
sbiw r24 ,1 ; 2 ?????? (0.250 µsec)
nop ; 1 ?????? (0.125 µsec)
nop ; 1 ?????? (0.125 µsec)
nop ; 1 ?????? (0.125 µsec)
nop ; 1 ?????? (0.125 µsec)
brne wait_usec ; 1 ? 2 ?????? (0.125 ? 0.250 µsec)
ret ; 4 ?????? (0.500 µsec)







write_2_nibbles:
push r24 ; st???e? ta 4 MSB
in r25 ,PIND ; d?aﬂ????ta? ta 4 LSB ?a? ta ?a?ast?????µe
andi r25 ,0x0f ; ??a ?a µ?? ?a??s??µe t?? ?p??a p??????µe?? ?at?stas?
andi r24 ,0xf0 ; ap?µ??????ta? ta 4 MSB ?a?
add r24 ,r25 ; s??d?????ta? µe ta p???p?????ta 4 LSB
out PORTD ,r24 ; ?a? d????ta? st?? ???d?
sbi PORTD ,PD3 ; d?µ?????e?ta? pa?µ?? Enable st?? a???d??t? PD3
cbi PORTD ,PD3 ; PD3=1 ?a? µet? PD3=0
pop r24 ; st???e? ta 4 LSB. ??a?t?ta? t? byte.
swap r24 ; e?a???ss??ta? ta 4 MSB µe ta 4 LSB
andi r24 ,0xf0 ; p?? µe t?? se??? t??? ap?st?????ta?
add r24 ,r25
out PORTD ,r24
sbi PORTD ,PD3 ; ???? pa?µ?? Enable
cbi PORTD ,PD3
ret
lcd_command:
cbi PORTD ,PD2 ; ep????? t?? ?ata????t? e?t???? (PD2=1)
rcall write_2_nibbles ; ap?st??? t?? e?t???? ?a? a?aµ??? 39µsec
ldi r24 ,39 ; ??a t?? ????????s? t?? e?t??es?? t?? ap? t?? e?e??t? t?? lcd.
ldi r25 ,0 ; S??.: ?p?????? d?? e?t????, ?? clear display ?a? return home,
rcall wait_usec ; p?? apa?t??? s?µa?t??? µe?a??te?? ??????? d??st?µa.
ret
lcd_data:
sbi PORTD ,PD2 ; ep????? t?? ?ata????t? ded?µ???? (PD2=1)
rcall write_2_nibbles ; ap?st??? t?? byte
ldi r24 ,43 ; a?aµ??? 43µsec µ???? ?a ?????????e? ? ????
ldi r25 ,0 ; t?? ded?µ???? ap? t?? e?e??t? t?? lcd
rcall wait_usec
ret
lcd_init:
ldi r25,0
ldi r24 ,40 ; ?ta? ? e?e??t?? t?? lcd t??f?d?te?ta? µeldi r25 ,0 ; ?e?µa e?te?e? t?? d??? t?? a?????p???s?.
rcall wait_msec ; ??aµ??? 40 msec µ???? a?t? ?a ?????????e?.
ldi r24 ,0x30 ; e?t??? µet?ﬂas?? se 8 bit mode
out PORTD ,r24 ; epe?d? de? µp????µe ?a e?µaste ﬂ?ﬂa???
sbi PORTD ,PD3 ; ??a t? d?aµ??f?s? e?s?d?? t?? e?e??t?
cbi PORTD ,PD3 ; t?? ??????, ? e?t??? ap?st???eta? d?? f????
ldi r24 ,39
ldi r25 ,0 ; e?? ? e?e??t?? t?? ?????? ﬂ??s?eta? se 8-bit mode
rcall wait_usec ; de? ?a s?µﬂe? t?p?ta, a??? a? ? e?e??t?? ??e? d?aµ??f?s?
; e?s?d?? 4 bit ?a µetaﬂe? se d?aµ??f?s? 8 bit
ldi r24 ,0x30
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x20 ; a??a?? se 4-bit mode
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x28 ; ep????? ?a?a?t???? µe?????? 5x8 ?????d??
rcall lcd_command ; ?a? eµf???s? d?? ??aµµ?? st?? ?????
ldi r24 ,0x0c ; e?e???p???s? t?? ??????, ap?????? t?? ???s??a
rcall lcd_command
ldi r24 ,0x01 ; ?a?a??sµ?? t?? ??????
rcall lcd_command
ldi r24 ,low(1530)
ldi r25 ,high(1530)
rcall wait_usec
ldi r24 ,0x06 ; e?e???p???s? a?t?µat?? a???s?? ?at? 1 t?? d?e????s??
rcall lcd_command ; p?? e??a? ap????e?µ??? st?? µet??t? d?e????se?? ?a?
; ape?e???p???s? t?? ???s??s?? ????????? t?? ??????
ret

