
#include "m16def.inc"
.DSEG
_tmp_:.byte 2
.CSEG

.org 0x0
rjmp reset
;-------------------------------------------------------------------------
;----Initilize------------------------------------------------------------
;-------------------------------------------------------------------------
reset:
ldi r24 ,(1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4) 
out DDRC ,r24 
ser r24
out DDRB, r24
ldi	r16,LOW(RAMEND)		; load low byte of RAMEND into r16
	out	SPL,r16			; store r16 in stack pointer low
	ldi	r16,HIGH(RAMEND)	; load high byte of RAMEND into r16
	out	SPH,r16		
ser r24
out DDRD, r24 
rcall lcd_init 

;-------------------------------------------------------------------------
;----Main Program---------------------------------------------------------
;-------------------------------------------------------------------------
main:
clr r19
ldi r24,0x0A						;parametre for scan_keypad_rising_edge
rcall scan_keypad_rising_edge
rcall keypad_to_ascii
cpi r24, 0x00						;if no button pressed keep scanning
breq main
mov r21,r24
cpi r21,0x3A						;else if it's bigger than '9'
brlo next							;we have to bypass some chars in ascii code
ldi r20, 0x09						;in order to get there dec number
add r21, r20
next:
andi r21,0x0F						;creating the dec number
second:
ldi r24,0x0A
rcall scan_keypad_rising_edge		;reading the second hex number
rcall keypad_to_ascii
cpi r24, 0x00
breq second							;keep scanning until something pressed
mov r23,r24
cpi r23,0x3A
brlo nextS
ldi r20, 0x09
add r23, r20			
nextS:
;out PORTB,r21
andi r23,0x0F						;creating the second dec number
lsl r21
lsl r21
lsl r21
lsl r21
add r21,r23							;creating all the number in binary form
ldi r18,'+'							;initialize r18 with '+' (r18 sign register)
sbrs r21,7
rjmp pos
ldi r18,'-'							;if the result number is negative make r18 = '-'
dec r21
com r21

pos:
ldi r20, 0x00						;(r20 hundreds register)
cpi r21,0x64                                                                                                                                                                                                                                                                                                                                                                                                          
brlo nextp
ldi r20, 0x01
subi r21,0x64

clr r19
nextp:
cpi r21,0x0A						;(r19 doxens register)
brlo fin
inc r19
subi r21,0x0A
rjmp nextp
fin:
rcall lcd_init						;starting printing on the LCD display the
ldi r22,0x30						;result in the format
mov r24,r18							;r18  r20   r19   r21
rcall lcd_data						;each of them containing the char
add r20,r22	
mov r24,r20
rcall lcd_data 
add r19,r22
mov r24,r19
rcall lcd_data 
add r21,r22
mov r24,r21
rcall lcd_data 

jmp main








;-------------------------------------------------------------------------
;----Library Functions----------------------------------------------------
;-------------------------------------------------------------------------



scan_row:
ldi r25 , 0x08
back_:
lsl r25			
dec r24			
brne back_
out PORTC, r25 
nop
nop				
in r24 , PINC	
andi r24 ,0x0F	
ret


wait_msec:
push r24 ; 
push r25 ; 
ldi r24 , low(998) 
ldi r25 , high(998) 
rcall wait_usec 
pop r25 
pop r24 
sbiw r24 , 1 
brne wait_msec 
ret 


wait_usec:
sbiw r24 ,1 
nop 
nop 
nop 
nop 
brne wait_usec 
ret


scan_keypad:
ldi r24 , 0x01 
rcall scan_row
swap r24 
mov r27 , r24
ldi r24 ,0x02
rcall scan_row
add r27 , r24 

ldi r24 , 0x03 
rcall scan_row
swap r24
mov r26 , r24

ldi r24 ,0x04 
rcall scan_row
add r26 , r24 
movw r24 , r26 
ret
















keypad_to_ascii: ; ?????? ‘1’ st?? ??se?? t?? ?ata????t? r26 d???????
movw r26 ,r24 ; ta pa?a??t? s?µß??a ?a? a???µ???
ldi r24 ,'E'
sbrc r26 ,0
ret
ldi r24 ,'0'
sbrc r26 ,1
ret
ldi r24 ,'F'
sbrc r26 ,2
ret
ldi r24 ,'D'
sbrc r26 ,3 ; a? de? e??a? ‘1’pa?a??µpte? t?? ret, a????? (a? e??a? ‘1’)
ret ; ep?st??fe? µe t?? ?ata????t? r24 t?? ASCII t?µ? t?? D.
ldi r24 ,'7'
sbrc r26 ,4
ret
ldi r24 ,'8'
sbrc r26 ,5
ret
ldi r24 ,'9'
sbrc r26 ,6
ret
ldi r24 ,'C'
sbrc r26 ,7
ret

ldi r24 ,'4' ; ?????? ‘1’ st?? ??se?? t?? ?ata????t? r27 d???????
sbrc r27 ,0 ; ta pa?a??t? s?µß??a ?a? a???µ???
ret
ldi r24 ,'5'
sbrc r27 ,1
ret
ldi r24 ,'6'
sbrc r27 ,2
ret
ldi r24 ,'B'
sbrc r27 ,3
ret
ldi r24 ,'1'
sbrc r27 ,4
ret
ldi r24 ,'2'
sbrc r27 ,5
ret
ldi r24 ,'3'
sbrc r27 ,6
ret
ldi r24 ,'A'
sbrc r27 ,7
ret
clr r24
ret



write_2_nibbles:
push r24 ; st???e? ta 4 MSB
in r25 ,PIND ; d?aß????ta? ta 4 LSB ?a? ta ?a?ast?????µe
andi r25 ,0x0f ; ??a ?a µ?? ?a??s??µe t?? ?p??a p??????µe?? ?at?stas?
andi r24 ,0xf0 ; ap?µ??????ta? ta 4 MSB ?a?
add r24 ,r25 ; s??d?????ta? µe ta p???p?????ta 4 LSB
out PORTD ,r24 ; ?a? d????ta? st?? ???d?
sbi PORTD ,PD3 ; d?µ?????e?ta? pa?µ?? Enable st?? a???d??t? PD3
cbi PORTD ,PD3 ; PD3=1 ?a? µet? PD3=0
pop r24 ; st???e? ta 4 LSB. ??a?t?ta? t? byte.
swap r24 ; e?a???ss??ta? ta 4 MSB µe ta 4 LSB
andi r24 ,0xf0 ; p?? µe t?? se??? t??? ap?st?????ta?
add r24 ,r25
out PORTD ,r24
sbi PORTD ,PD3 ; ???? pa?µ?? Enable
cbi PORTD ,PD3
ret
lcd_command:
cbi PORTD ,PD2 ; ep????? t?? ?ata????t? e?t???? (PD2=1)
rcall write_2_nibbles ; ap?st??? t?? e?t???? ?a? a?aµ??? 39µsec
ldi r24 ,39 ; ??a t?? ????????s? t?? e?t??es?? t?? ap? t?? e?e??t? t?? lcd.
ldi r25 ,0 ; S??.: ?p?????? d?? e?t????, ?? clear display ?a? return home,
rcall wait_usec ; p?? apa?t??? s?µa?t??? µe?a??te?? ??????? d??st?µa.
ret
lcd_data:
sbi PORTD ,PD2 ; ep????? t?? ?ata????t? ded?µ???? (PD2=1)
rcall write_2_nibbles ; ap?st??? t?? byte
ldi r24 ,43 ; a?aµ??? 43µsec µ???? ?a ?????????e? ? ????
ldi r25 ,0 ; t?? ded?µ???? ap? t?? e?e??t? t?? lcd
rcall wait_usec
ret
lcd_init:
ldi r25,0
ldi r24 ,40 ; ?ta? ? e?e??t?? t?? lcd t??f?d?te?ta? µeldi r25 ,0 ; ?e?µa e?te?e? t?? d??? t?? a?????p???s?.
rcall wait_msec ; ??aµ??? 40 msec µ???? a?t? ?a ?????????e?.
ldi r24 ,0x30 ; e?t??? µet?ßas?? se 8 bit mode
out PORTD ,r24 ; epe?d? de? µp????µe ?a e?µaste ß?ßa???
sbi PORTD ,PD3 ; ??a t? d?aµ??f?s? e?s?d?? t?? e?e??t?
cbi PORTD ,PD3 ; t?? ??????, ? e?t??? ap?st???eta? d?? f????
ldi r24 ,39
ldi r25 ,0 ; e?? ? e?e??t?? t?? ?????? ß??s?eta? se 8-bit mode
rcall wait_usec ; de? ?a s?µße? t?p?ta, a??? a? ? e?e??t?? ??e? d?aµ??f?s?
; e?s?d?? 4 bit ?a µetaße? se d?aµ??f?s? 8 bit
ldi r24 ,0x30
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x20 ; a??a?? se 4-bit mode
out PORTD ,r24
sbi PORTD ,PD3
cbi PORTD ,PD3
ldi r24 ,39
ldi r25 ,0
rcall wait_usec
ldi r24 ,0x28 ; ep????? ?a?a?t???? µe?????? 5x8 ?????d??
rcall lcd_command ; ?a? eµf???s? d?? ??aµµ?? st?? ?????
ldi r24 ,0x0c ; e?e???p???s? t?? ??????, ap?????? t?? ???s??a
rcall lcd_command
ldi r24 ,0x01 ; ?a?a??sµ?? t?? ??????
rcall lcd_command
ldi r24 ,low(1530)
ldi r25 ,high(1530)
rcall wait_usec
ldi r24 ,0x06 ; e?e???p???s? a?t?µat?? a???s?? ?at? 1 t?? d?e????s??
rcall lcd_command ; p?? e??a? ap????e?µ??? st?? µet??t? d?e????se?? ?a?
; ape?e???p???s? t?? ???s??s?? ????????? t?? ??????
ret

scan_keypad_rising_edge:
mov r22 ,r24 		; ap????e?se t? ????? sp??????sµ?? st?? r22
rcall scan_keypad ; ??e??e t? p???t??????? ??a p?esµ????? d?a??pte?
push r24			 ; ?a? ap????e?se t? ap?t??esµa
push r25
mov r24 ,r22 		; ?a??st???se r22 ms (t?p???? t?µ?? 10-20 msec p?? ?a?????eta? ap? t??
ldi r25 ,0			 ; ?atas?e?ast? t?? p???t???????? – ?????d????e?a sp??????sµ??)
rcall wait_msec
rcall scan_keypad 	; ??e??e t? p???t??????? ?a?? ?a? ap?????e
pop r23 			; ?sa p???t?a eµfa?????? sp??????sµ?
pop r22
and r24 ,r22
and r25 ,r23
ldi r26 ,low(_tmp_) ; f??t?se t?? ?at?stas? t?? d?a??pt?? st??
ldi r27 ,high(_tmp_) ; p??????µe?? ???s? t?? ???t??a? st??? r27:r26
ld r23 ,X+
ld r22 ,X
st X ,r24 			; ap????e?se st? RAM t? ??a ?at?stas?
st -X ,r25			 ; t?? d?a??pt??
com r23
com r22 			; ??e? t??? d?a??pte? p?? ????? «µ????» pat??e?
and r24 ,r22
and r25 ,r23
ret

